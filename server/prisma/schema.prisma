generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

// Add these models to your existing schema.prisma file

model KeywordAnalysis {
  id            String   @id @default(uuid())
  keyword       String
  userId        String?
  firstAnalyzed DateTime @default(now())
  lastUpdated   DateTime @updatedAt
  searchCount   Int      @default(1)

  // Relations
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  videoAnalysis   VideoAnalysis[]
  keywordInsights KeywordInsights[]

  @@index([keyword])
  @@index([userId])
  @@index([lastUpdated])
  @@map("keyword_analysis")
}

model VideoAnalysis {
  id                String   @id @default(uuid())
  keywordAnalysisId String
  videoId           String
  title             String   @db.Text
  views             Int
  uploadDate        DateTime
  channelName       String
  channelId         String
  tags              String[] // Array of tags
  description       String?  @db.Text
  analyzedAt        DateTime @default(now())

  // Relations
  keywordAnalysis KeywordAnalysis @relation(fields: [keywordAnalysisId], references: [id], onDelete: Cascade)

  @@index([keywordAnalysisId])
  @@index([videoId])
  @@index([uploadDate])
  @@map("video_analysis")
}

model KeywordInsights {
  id                 String             @id @default(uuid())
  keywordAnalysisId  String
  competitionScore   Float
  averageViews       Int
  trendDirection     TrendDirection
  contentOpportunity ContentOpportunity
  recentVideoCount   Int
  topChannels        String[] // Array of top channel names
  aiInsights         String[] // Array of AI-generated insights
  analysisDate       DateTime           @default(now())

  // Relations
  keywordAnalysis KeywordAnalysis @relation(fields: [keywordAnalysisId], references: [id], onDelete: Cascade)

  @@index([keywordAnalysisId])
  @@index([analysisDate])
  @@map("keyword_insights")
}

// Enums for keyword analysis
enum TrendDirection {
  UP
  DOWN
  STABLE
}

enum ContentOpportunity {
  HIGH
  MEDIUM
  LOW
}

// Update your User model to include the relation
model User {
  id                    String                @id @default(uuid())
  name                  String?
  email                 String                @unique
  password              String
  isVerified            Boolean               @default(false)
  emailVerificationCode String?
  profileImage          String?
  gender                Gender?               @default(MALE)
  createdAt             DateTime              @default(now())
  resetToken            String?
  role                  Role                  @default(USER)
  parentId              String?
  creditBalance         Int                   @default(0)
  credits               Credit[]
  sentInvitations       Invitation[]          @relation("UserInvitations")
  parent                User?                 @relation("ParentOf", fields: [parentId], references: [id], onDelete: SetNull)
  children              User[]                @relation("ParentOf")
  payments              Payment[]
  SentimentalAnalysis   SentimentalAnalysis[]
  titleGenerations      TitleGeneration[]
  keywordAnalyses       KeywordAnalysis[]

  FeatureUsageLog  FeatureUsageLog[]
  UserEngagement   UserEngagement?
  EvaluationMetric EvaluationMetric[]
}

model EvaluationMetric {
  id          String @id @default(cuid())
  userId      String
  title       String
  description String @db.Text
  tags        String

  // Results
  predictedViews Int
  contentScore   Float

  // Metadata
  processingTime Int? // in milliseconds

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("evaluation_metrics")
}

// model KeywordAnalysis {
//   id        String   @id @default(uuid())
//   userId    String
//   videoUrl  String
//   keywords  String[] // Store keywords as a string array
//   createdAt DateTime @default(now())
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model PopularKeyword {
  id        String   @id @default(uuid())
  keyword   String   @unique
  count     Int      @default(1)
  updatedAt DateTime @updatedAt
}

model KeywordUsage {
  id        String   @id @default(uuid())
  keyword   String
  createdAt DateTime @default(now())

  @@index([createdAt])
}

model TitleGeneration {
  id        String           @id @default(uuid())
  prompt    String           @db.Text
  userId    String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  titles    GeneratedTitle[] // One-to-many relationship with titles
  provider  String? // Store which provider generated the titles (ollama, openrouter, etc.)
}

// Model for individual titles within a generation
model GeneratedTitle {
  id                String          @id @default(uuid())
  title             String
  keywords          String[] // Store keywords as an array
  titleGenerationId String
  generation        TitleGeneration @relation(fields: [titleGenerationId], references: [id], onDelete: Cascade)
  isFavorite        Boolean         @default(false)
}

// schema.prisma - Updated model for Ideas of the Day
model IdeasOfTheDay {
  id           String   @id @default(uuid())
  title        String // Generated YouTube title
  originalNews String // Original news title for reference
  link         String // Original news link
  keywords     String[] // SEO keywords for the title
  pubDate      DateTime // Original publication date
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("ideas_of_the_day")
}

// Enhanced feature usage tracking
model FeatureUsage {
  id         String      @id @default(cuid())
  feature    FeatureType @unique
  totalCount Int         @default(1)
  updatedAt  DateTime    @updatedAt
  createdAt  DateTime    @default(now())
}

// Detailed usage logs for analytics
model FeatureUsageLog {
  id       String      @id @default(cuid())
  feature  FeatureType
  userId   String? // Track which user used the feature
  metadata Json? // Store additional context (e.g., video URL, keywords count)
  usedAt   DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([usedAt])
  @@index([feature])
  @@index([userId])
}

// Daily aggregated insights for faster queries
model DailyInsights {
  id   String   @id @default(cuid())
  date DateTime @unique @db.Date

  // Feature usage counts
  keywordAnalysisCount   Int @default(0)
  sentimentAnalysisCount Int @default(0)
  titleGenerationCount   Int @default(0)
  evaluationMetricCount  Int @default(0)

  // User activity
  activeUsers Int @default(0)
  newUsers    Int @default(0)
  totalUsers  Int @default(0)

  // Content metrics
  totalTitlesGenerated  Int @default(0)
  totalKeywordsAnalyzed Int @default(0)
  totalVideosAnalyzed   Int @default(0)

  // Performance metrics
  avgResponseTime Float? // Average API response time
  errorRate       Float? // Error rate percentage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("daily_insights")
}

// User engagement insights
model UserEngagement {
  id     String @id @default(cuid())
  userId String @unique

  // Feature usage per user
  keywordAnalysisCount   Int @default(0)
  sentimentAnalysisCount Int @default(0)
  titleGenerationCount   Int @default(0)
  evaluationMetricCount  Int @default(0)

  // User behavior
  firstUsedAt      DateTime?
  lastUsedAt       DateTime?
  totalSessions    Int       @default(0)
  avgSessionLength Float? // in minutes

  // Preferences (most used features)
  favoriteFeature FeatureType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_engagement")
}

// System performance metrics
model SystemMetrics {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())

  // API Performance
  avgResponseTime Float // milliseconds
  requestCount    Int   @default(0)
  errorCount      Int   @default(0)

  // Feature-specific metrics
  feature     FeatureType?
  successRate Float? // percentage

  // Resource usage (optional)
  memoryUsage Float? // MB
  cpuUsage    Float? // percentage

  @@index([timestamp])
  @@index([feature])
  @@map("system_metrics")
}

// Popular content insights
model PopularContent {
  id          String      @id @default(cuid())
  contentType ContentType
  content     String // The actual content (keyword, title, etc.)
  usageCount  Int         @default(1)
  lastUsedAt  DateTime    @default(now())

  // Additional metadata
  metadata Json? // Store additional context

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add compound unique constraint
  @@unique([contentType, content], name: "contentType_content")
  @@index([contentType])
  @@index([usageCount])
  @@map("popular_content")
}

// ================================
// ðŸ“Š ENUMS FOR INSIGHTS
// ================================

enum FeatureType {
  KEYWORD_ANALYSIS
  SENTIMENT_ANALYSIS
  TITLE_GENERATION
  EVALUATION_METRIC
  USER_AUTHENTICATION
  PAYMENT_PROCESSING
  ADMIN_DASHBOARD
}

enum ContentType {
  KEYWORD
  TITLE
  VIDEO_URL
  TAG
  DESCRIPTION
}

model Credit {
  id        String   @id @default(uuid())
  credits   Int
  createdAt DateTime @default(now())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id           String   @id @default(uuid())
  inviterId    String
  inviteeEmail String
  inviteLink   String?
  isUsed       Boolean  @default(false)
  expiresAt    DateTime @default(dbgenerated("(NOW() + INTERVAL '1 hour')"))
  createdAt    DateTime @default(now())
  inviter      User     @relation("UserInvitations", fields: [inviterId], references: [id], onDelete: Cascade)

  @@index([inviterId])
}

model Policy {
  id        String     @id @default(uuid())
  name      String?
  credits   Int
  createdAt DateTime   @default(now())
  type      PolicyType
}

model SentimentalAnalysis {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  positive  Float
  negative  Float
  neutral   Float
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditPackage {
  id        String   @id @default(uuid())
  name      String // e.g., "Bronze", "Silver", "Gold"
  credits   Int // number of credits provided by this package
  price     Float // price of the package (for example, in USD)
  createdAt DateTime @default(now())

  // Relation to payments made for this package
  payments Payment[]
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  creditPackageId String
  amount          Float
  stripePaymentId String        @unique
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditPackage CreditPackage @relation(fields: [creditPackageId], references: [id], onDelete: Restrict)
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

model Category {
  id         String  @id @default(uuid())
  categoryId String  @unique
  title      String
  videos     Video[]
}

model Video {
  id               String   @id @default(uuid())
  videoId          String   @unique
  title            String
  publishedAt      DateTime
  channelId        String
  channelTitle     String
  trendingDate     DateTime
  tags             String
  viewCount        Int
  likes            Int
  dislikes         Int
  commentCount     Int
  thumbnailLink    String
  commentsDisabled Boolean
  ratingsDisabled  Boolean
  description      String
  countryCode      String
  pageToken        String?
  categoryId       String
  category         Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
}

model YT_KEYS {
  id        String   @id @default(uuid())
  key       String
  createdAt DateTime @default(now())
}

enum PolicyType {
  PARENT_RELATIONSHIP
  SIMPLE_RELATIONSHIP
  FIRST_SIGNUP
}

enum Role {
  USER
  ADMIN
}
