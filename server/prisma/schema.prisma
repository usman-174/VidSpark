generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                  String                @id @default(uuid())
  name                String?
  email               String                @unique
  password            String
  isVerified              Boolean  @default(false)
  emailVerificationCode   String?
  profileImage        String?
  gender              Gender?               @default(MALE) // Updated to use the Gender enum 
  createdAt           DateTime              @default(now())
  resetToken          String?
  role                Role                  @default(USER)
  parentId            String?
  creditBalance       Int                   @default(0) // <-- current available credits
  credits             Credit[]
  sentInvitations     Invitation[]          @relation("UserInvitations")
  parent              User?                 @relation("ParentOf", fields: [parentId], references: [id])
  children            User[]                @relation("ParentOf")
  payments            Payment[]
  SentimentalAnalysis SentimentalAnalysis[]
}

model Credit {
  id        String   @id @default(uuid())
  credits   Int
  createdAt DateTime @default(now())
  userId    String?
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id           String   @id @default(uuid())
  inviterId    String
  inviteeEmail String
  inviteLink   String?
  isUsed       Boolean  @default(false)
  expiresAt    DateTime @default(dbgenerated("(NOW() + INTERVAL '1 hour')"))
  createdAt    DateTime @default(now())
  inviter      User     @relation("UserInvitations", fields: [inviterId], references: [id])

  @@index([inviterId])
}

model Policy {
  id        String     @id @default(uuid())
  name      String?
  credits   Int
  createdAt DateTime   @default(now())
  type      PolicyType
}

model SentimentalAnalysis {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  positive  Float
  negative  Float
  neutral   Float
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model CreditPackage {
  id        String   @id @default(uuid())
  name      String // e.g., "Bronze", "Silver", "Gold"
  credits   Int // number of credits provided by this package
  price     Float // price of the package (for example, in USD)
  createdAt DateTime @default(now())

  // Relation to payments made for this package
  payments Payment[]
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  creditPackageId String
  amount          Float
  stripePaymentId String        @unique // <--- Mark as unique
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id])
  creditPackage CreditPackage @relation(fields: [creditPackageId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

model Category {
  id         String  @id @default(uuid())
  categoryId String  @unique
  title      String
  videos     Video[]
}

model Video {
  id               String   @id @default(uuid())
  videoId          String   @unique
  title            String
  publishedAt      DateTime
  channelId        String
  channelTitle     String
  trendingDate     DateTime
  tags             String
  viewCount        Int
  likes            Int
  dislikes         Int
  commentCount     Int
  thumbnailLink    String
  commentsDisabled Boolean
  ratingsDisabled  Boolean
  description      String
  countryCode      String
  pageToken        String?
  categoryId       String
  category         Category @relation(fields: [categoryId], references: [categoryId])
}

model YT_KEYS {
  id        String   @id @default(uuid())
  key       String
  createdAt DateTime @default(now())
}

enum PolicyType {
  PARENT_RELATIONSHIP
  SIMPLE_RELATIONSHIP
  FIRST_SIGNUP
  
}

enum Role {
  USER
  ADMIN
}
